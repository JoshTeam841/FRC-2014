// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc841.CometFRC2014.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc841.CometFRC2014.Robot;
/**
 * This Command shoots the catapult and stops it at the release limit
 * 
 * @author Josh.Quintero@gmail.com (Joshua Quintero)
 */
public class  ShootCatapult extends Command {
    public ShootCatapult() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.catapult);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        //sets the rachet gearbox to Nuetral and stop the winch motor
        //to shoot the catapult
        Robot.catapult.RachetRelease();
        Robot.catapult.WInchStop();
        setTimeout(1);
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        //The release is done once the angle of the catapult exceeds 
        //the release limit
        return (Robot.catapult.getPosition() > Robot.catapult.getReleaseLimit())|| isTimedOut();
    }
    // Called once after isFinished returns true
    protected void end() {
        //set the rachet gearbox into gear
        
        Robot.catapult.RachetEngage();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        Robot.catapult.RachetOff();
    }
}
