// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc841.CometFRC2014;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogChannel intakeTiltMechanismsPotentiometer;
    public static DigitalInput intakeTiltMechanismsBallPresentSensor;
    public static DoubleSolenoid intakeTiltMechanismsBackTilt;
    public static DigitalInput intakeTiltMechanismsHighBallSensor;
    public static DoubleSolenoid intakeTiltMechanismsFrontTilt;
    public static DoubleSolenoid catapultRachetSolenoid;
    public static AnalogChannel catapultPotentiometer;
    public static SpeedController catapultWinchMotor;
    public static DigitalInput catapultSecondaryLimit;
    public static AnalogChannel driveTrainUltraSonicRangeFinder;
    public static Encoder driveTrainLeftQuadrature;
    public static Encoder driveTrainRightQuadrature;
    public static SpeedController driveTrainLeftMotorA;
    public static SpeedController driveTrainLeftMotorB;
    public static SpeedController driveTrainLeftMotorC;
    public static SpeedController driveTrainRightMotorA;
    public static SpeedController driveTrainRightMotorB;
    public static SpeedController driveTrainRightMotorC;
    public static DoubleSolenoid driveTrainShifter;
    public static DigitalInput pneumaticSystemPressureSwitch;
    public static Relay pneumaticSystemCompressor;
    public static DigitalInput intakesHighBallSensor;
    public static DigitalInput intakesBallPresentSensor;
    public static Relay intakesFrontIntake;
    public static SpeedController intakesBackIntake;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intakeTiltMechanismsPotentiometer = new AnalogChannel(1, 3);
	LiveWindow.addSensor("IntakeTiltMechanisms", "Potentiometer", intakeTiltMechanismsPotentiometer);
        
        intakeTiltMechanismsBallPresentSensor = new DigitalInput(1, 7);
	LiveWindow.addSensor("IntakeTiltMechanisms", "BallPresentSensor", intakeTiltMechanismsBallPresentSensor);
        
        intakeTiltMechanismsBackTilt = new DoubleSolenoid(1, 3, 4);      
	
        
        intakeTiltMechanismsHighBallSensor = new DigitalInput(1, 13);
	LiveWindow.addSensor("IntakeTiltMechanisms", "HighBallSensor", intakeTiltMechanismsHighBallSensor);
        
        intakeTiltMechanismsFrontTilt = new DoubleSolenoid(1, 1, 2);      
	
        
        catapultRachetSolenoid = new DoubleSolenoid(1, 5, 6);      
	
        
        catapultPotentiometer = new AnalogChannel(1, 1);
	LiveWindow.addSensor("Catapult", "Potentiometer", catapultPotentiometer);
        
        catapultWinchMotor = new Victor(1, 8);
	LiveWindow.addActuator("Catapult", "WinchMotor", (Victor) catapultWinchMotor);
        
        catapultSecondaryLimit = new DigitalInput(1, 8);
	LiveWindow.addSensor("Catapult", "SecondaryLimit", catapultSecondaryLimit);
        
        driveTrainUltraSonicRangeFinder = new AnalogChannel(1, 2);
	LiveWindow.addSensor("DriveTrain", "UltraSonicRangeFinder", driveTrainUltraSonicRangeFinder);
        
        driveTrainLeftQuadrature = new Encoder(1, 3, 1, 4, false, EncodingType.k4X);
	LiveWindow.addSensor("DriveTrain", "LeftQuadrature", driveTrainLeftQuadrature);
        driveTrainLeftQuadrature.setDistancePerPulse(1.0);
        driveTrainLeftQuadrature.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainLeftQuadrature.start();
        driveTrainRightQuadrature = new Encoder(1, 5, 1, 6, false, EncodingType.k4X);
	LiveWindow.addSensor("DriveTrain", "RightQuadrature", driveTrainRightQuadrature);
        driveTrainRightQuadrature.setDistancePerPulse(1.0);
        driveTrainRightQuadrature.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainRightQuadrature.start();
        driveTrainLeftMotorA = new Victor(1, 2);
	LiveWindow.addActuator("DriveTrain", "LeftMotorA", (Victor) driveTrainLeftMotorA);
        
        driveTrainLeftMotorB = new Victor(1, 3);
	LiveWindow.addActuator("DriveTrain", "LeftMotorB", (Victor) driveTrainLeftMotorB);
        
        driveTrainLeftMotorC = new Victor(1, 4);
	LiveWindow.addActuator("DriveTrain", "LeftMotorC", (Victor) driveTrainLeftMotorC);
        
        driveTrainRightMotorA = new Victor(1, 5);
	LiveWindow.addActuator("DriveTrain", "RightMotorA", (Victor) driveTrainRightMotorA);
        
        driveTrainRightMotorB = new Victor(1, 6);
	LiveWindow.addActuator("DriveTrain", "RightMotorB", (Victor) driveTrainRightMotorB);
        
        driveTrainRightMotorC = new Victor(1, 7);
	LiveWindow.addActuator("DriveTrain", "RightMotorC", (Victor) driveTrainRightMotorC);
        
        driveTrainShifter = new DoubleSolenoid(1, 7, 8);      
	
        
        pneumaticSystemPressureSwitch = new DigitalInput(1, 2);
	LiveWindow.addSensor("PneumaticSystem", "PressureSwitch", pneumaticSystemPressureSwitch);
        
        pneumaticSystemCompressor = new Relay(1, 1);
	LiveWindow.addActuator("PneumaticSystem", "Compressor", pneumaticSystemCompressor);
        
        intakesHighBallSensor = new DigitalInput(1, 14);
	LiveWindow.addSensor("Intakes", "HighBallSensor", intakesHighBallSensor);
        
        intakesBallPresentSensor = new DigitalInput(1, 1);
	LiveWindow.addSensor("Intakes", "BallPresentSensor", intakesBallPresentSensor);
        
        intakesFrontIntake = new Relay(1, 5);
	LiveWindow.addActuator("Intakes", "FrontIntake", intakesFrontIntake);
        
        intakesBackIntake = new Victor(1, 1);
	LiveWindow.addActuator("Intakes", "BackIntake", (Victor) intakesBackIntake);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
