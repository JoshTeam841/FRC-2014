// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc841.CometFRC2014;
import edu.wpi.first.wpilibj.DriverStationLCD;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import org.usfirst.frc841.CometFRC2014.commands.*;
import org.usfirst.frc841.CometFRC2014.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    Command autonomousCommand;
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static IntakeTiltMechanisms intakeTiltMechanisms;
    public static Catapult catapult;
    public static DriveTrain driveTrain;
    public static PneumaticSystem pneumaticSystem;
    public static Vision vision;
    public static Intakes intakes;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SendableChooser AutonomousModes;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intakeTiltMechanisms = new IntakeTiltMechanisms();
        catapult = new Catapult();
        driveTrain = new DriveTrain();
        pneumaticSystem = new PneumaticSystem();
        vision = new Vision();
        intakes = new Intakes();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        oi = new OI();
	
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        AutonomousModes = new SendableChooser();
        AutonomousModes.addDefault("One Ball Auto",new AutonomoussingleShot());
        AutonomousModes.addObject("Shoot to Left",new AutoShootLeftSide());
        AutonomousModes.addObject("AutonoumusCommand", new AutonomousCommand());
        AutonomousModes.addObject("Two Ball Auto",new AutonomoustwoBall());
        AutonomousModes.addObject("Three Ball Auto", new AutonomousthreeBall());
        SmartDashboard.putData("AutonomousModes", AutonomousModes);
    }
    public void autonomousInit() {
        // schedule the autonomous command (example)
        autonomousCommand = (Command) AutonomousModes.getSelected();
        if (autonomousCommand != null) autonomousCommand.start();
    }
    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
        //Update Telemetry to driver station
        updateLCD();
    }
    public void teleopInit() {
	// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }
    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        //Update Telemetry to driver station
        updateLCD();
    }
    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    // Update Driver station with Telemetry
    private void updateLCD() {
        DriverStationLCD lcd = DriverStationLCD.getInstance();
        
        // Display potentiometer voltage
        lcd.println(DriverStationLCD.Line.kUser2, 1, 
            "POT:" + 
            (Math.floor(Robot.catapult.getPosition()*10)/10.0)
            );
        
        // Display left and right encoder distance in inches
        lcd.println(DriverStationLCD.Line.kUser3, 1,
            "LE:" + 
            (Math.floor(Robot.driveTrain.getLeftEncoderDistance()*10)/10.0) + 
            "RE:" + 
            (Math.floor(Robot.driveTrain.getRightEncoderDistance()*10)/10.0)
            );
        // Display throttle and wheel Joystick value of driver
        lcd.println(DriverStationLCD.Line.kUser4, 1, 
            "Avg:" + Robot.driveTrain.getAverageSpeed());
            //"LJoy:" + 
            //(Math.floor(Robot.oi.getDriver().getY()*10)/10.0) + 
            //"RJoy:" + 
            //(Math.floor(Robot.oi.getDriver().getThrottle()*10)/10.0)
            //);
        // Display Ultasonic Range Sensor in Inches
        lcd.println(DriverStationLCD.Line.kUser5, 1, 
            "Range: " +
            (Math.floor(Robot.driveTrain.getRange()*10)/10.0) +
            " in"        
            );
        
        
        // Display contents On driver station
        lcd.updateLCD();
    }
}
