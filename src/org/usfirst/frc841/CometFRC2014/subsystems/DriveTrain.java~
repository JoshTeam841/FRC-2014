// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc841.CometFRC2014.subsystems;
import org.usfirst.frc841.CometFRC2014.RobotMap;
import org.usfirst.frc841.CometFRC2014.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Joystick;
import org.usfirst.frc841.CometFRC2014.Robot;
/**
 *Defines the subsystem that makes up the Drive Train
 * 
 * @author Josh.Quintero@gmail.com (Joshua Quintero)
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogChannel ultraSonicRangeFinder = RobotMap.driveTrainUltraSonicRangeFinder;
    Encoder leftQuadrature = RobotMap.driveTrainLeftQuadrature;
    Encoder rightQuadrature = RobotMap.driveTrainRightQuadrature;
    SpeedController leftMotorA = RobotMap.driveTrainLeftMotorA;
    SpeedController leftMotorB = RobotMap.driveTrainLeftMotorB;
    SpeedController leftMotorC = RobotMap.driveTrainLeftMotorC;
    SpeedController rightMotorA = RobotMap.driveTrainRightMotorA;
    SpeedController rightMotorB = RobotMap.driveTrainRightMotorB;
    SpeedController rightMotorC = RobotMap.driveTrainRightMotorC;
    DoubleSolenoid shifter = RobotMap.driveTrainShifter;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    //Variables used for the Cheesy Poofs Drive style
    boolean isHighGear = false;
    private double oldWheel = 0.0;
    private double quickStopAccumulator = 0;
    private double throttleDeadband = 0.02;
    private double wheelDeadband = 0.02;
    private double sensitivityHigh = 0.85; 
    private double sensitivityLow = 0.75;
    private boolean isQuickTurn = false;
    private boolean isStraight = false;
    
   
    
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Drive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    //Run the slim down version of the Cheesy Poofs drive style
    public void Drive(Joystick stick){
       
        cheesyDrive(stick);
       // tankDrive(stick);
        
    }
    //Set the power on the left and right motor drive
    public void SetLeftRight(double LPower, double RPower){
        leftMotorA.set(LPower);
        leftMotorB.set(LPower);
        leftMotorC.set(LPower);
        rightMotorA.set(-RPower);
        rightMotorB.set(-RPower);
        rightMotorC.set(-RPower);
    }
    //Shift drive tran to high gear and update memory
    public void SetHighGear(){
        shifter.set(DoubleSolenoid.Value.kForward);
        isHighGear = true;
    }
    //Shift drive train to low gear and update memory
    public void SetLowGear(){
        shifter.set(DoubleSolenoid.Value.kReverse);
        isHighGear = false;
    }
    //returns the Yaxis value of the left joystick
    public double getThrottle(Joystick stick){
        return stick.getY();
    }
    //returns the Xaxis value of the right joystick
    public double getWheel(Joystick stick){
        return stick.getZ();
    }
    public double getYAxisLeftSide(Joystick stick){
        return stick.getY();
    }
    public double getYAxisRightSide(Joystick stick){
        return stick.getThrottle();
    }
    public void tankDrive(Joystick stick){
        double axisNonLinearity;
        //Get Y axis and make a deadband 
        double leftY =  handleDeadband(getYAxisLeftSide(stick),0.02);
        double rightY =  handleDeadband(getYAxisRightSide(stick),0.02);
        
        
         if (isHighGear) {
            axisNonLinearity = 0.5;
            // Smooth the controls on Left side
            leftY = Math.sin(Math.PI / 2.0 * axisNonLinearity * leftY) /
                Math.sin(Math.PI / 2.0 * axisNonLinearity);
            leftY = Math.sin(Math.PI / 2.0 * axisNonLinearity * leftY) /
                Math.sin(Math.PI / 2.0 * axisNonLinearity);
         
            //Smooth the controls on Right side
            rightY = Math.sin(Math.PI / 2.0 * axisNonLinearity * rightY) /
                Math.sin(Math.PI / 2.0 * axisNonLinearity);
            rightY = Math.sin(Math.PI / 2.0 * axisNonLinearity * rightY) /
                Math.sin(Math.PI / 2.0 * axisNonLinearity);
            }
            else{
                axisNonLinearity = 0.5;
            // Smooth the controls on Left side
            leftY = Math.sin(Math.PI / 2.0 * axisNonLinearity * leftY) /
                Math.sin(Math.PI / 2.0 * axisNonLinearity);
            leftY = Math.sin(Math.PI / 2.0 * axisNonLinearity * leftY) /
                Math.sin(Math.PI / 2.0 * axisNonLinearity);
         
            //Smooth the controls on Right side
            rightY = Math.sin(Math.PI / 2.0 * axisNonLinearity * rightY) /
                Math.sin(Math.PI / 2.0 * axisNonLinearity);
            rightY = Math.sin(Math.PI / 2.0 * axisNonLinearity * rightY) /
                Math.sin(Math.PI / 2.0 * axisNonLinearity);
            }
        
            //set the motors
            SetLeftRight(leftY,rightY);
        
    }
    //Enable quick turn AKA classical Archade drive
    public void setQuickTurn(){
        isQuickTurn = true;
    }
    //Disable quick turn
    public void resetQuickTurn(){
        isQuickTurn = false;
    }
    //Slim down version of the Cheesy Poofs drive style.
    public void cheesyDrive(Joystick stick){
        
        //Note quickturn and shift is taken care of with buttons in OI.
        
        double wheelNonLinearity;
        double wheel = handleDeadband(getWheel(stick),wheelDeadband); //double wheel = handleDeadband(controlBoard.rightStick.getX(), wheelDeadband);
        double throttle = - handleDeadband(getThrottle(stick),throttleDeadband);
        double negInertia = wheel - oldWheel;
        
        if(getAverageSpeed()> 2000){
            SetHighGear();
        }
        else if (getAverageSpeed() < 1500){
          SetLowGear();
        }
           
                
        oldWheel = wheel;
        if (isHighGear) {
            wheelNonLinearity = 0.6;
            // Apply a sin function that's scaled to make it feel better.
            wheel = Math.sin(Math.PI / 2.0 * wheelNonLinearity * wheel) /
            Math.sin(Math.PI / 2.0 * wheelNonLinearity);
            wheel = Math.sin(Math.PI / 2.0 * wheelNonLinearity * wheel) /
            Math.sin(Math.PI / 2.0 * wheelNonLinearity);
        } else {
            wheelNonLinearity = 0.5;
            // Apply a sin function that's scaled to make it feel better.
            wheel = Math.sin(Math.PI / 2.0 * wheelNonLinearity * wheel) /
            Math.sin(Math.PI / 2.0 * wheelNonLinearity);
            wheel = Math.sin(Math.PI / 2.0 * wheelNonLinearity * wheel) /
            Math.sin(Math.PI / 2.0 * wheelNonLinearity);
            wheel = Math.sin(Math.PI / 2.0 * wheelNonLinearity * wheel) /
            Math.sin(Math.PI / 2.0 * wheelNonLinearity);
        }
        
        double leftPwm, rightPwm, overPower;
        double sensitivity = 1.7;
        double angularPower;
        double linearPower;
        // Negative inertia!
        double negInertiaAccumulator = 0.0;
        double negInertiaScalar;
        
        
        if (isHighGear) {
            negInertiaScalar = 5.0;
            sensitivity = sensitivityHigh; //sensitivity = Constants.sensitivityHigh.getDouble();
        } else {
            if (wheel * negInertia > 0) {
                negInertiaScalar = 2.5;
            } else {
                if (Math.abs(wheel) > 0.65) {
                    negInertiaScalar = 5.0;
                } else {
                    negInertiaScalar = 3.0;
                }
            }
            sensitivity = sensitivityLow;   //sensitivity = Constants.sensitivityLow.getDouble();
            if (Math.abs(throttle) > 0.1) {
       // sensitivity = 1.0 - (1.0 - sensitivity) / Math.abs(throttle);
            }
        }
        
        
        double negInertiaPower = negInertia * negInertiaScalar;
        negInertiaAccumulator += negInertiaPower;
        wheel = wheel + negInertiaAccumulator;
        if (negInertiaAccumulator > 1) {
            negInertiaAccumulator -= 1;
        } else if (negInertiaAccumulator < -1) {
            negInertiaAccumulator += 1;
        } else {
            negInertiaAccumulator = 0;
        }
        linearPower = throttle;
        // Quickturn!
        if (isQuickTurn) {
            if (Math.abs(linearPower) < 0.2) {
                double alpha = 0.1;
                quickStopAccumulator = (1 - alpha) * quickStopAccumulator + alpha * limit(wheel, 1.0) * 5;
            }
            overPower = 1.0;
            if (isHighGear) {
                sensitivity = 1.0;
            } else {
                sensitivity = 1.0;
            }
            angularPower = wheel;
        } else {
            overPower = 0.0;
            angularPower = Math.abs(throttle) * wheel * sensitivity - quickStopAccumulator;
            if (quickStopAccumulator > 1) {
                quickStopAccumulator -= 1;
            } else if (quickStopAccumulator < -1) {
                quickStopAccumulator += 1;
            } else {
                quickStopAccumulator = 0.0;
            }
        }
        rightPwm = leftPwm = linearPower;
        leftPwm += angularPower;
        rightPwm -= angularPower;
        if (leftPwm > 1.0) {
            rightPwm -= overPower * (leftPwm - 1.0);
            leftPwm = 1.0;
        } else if (rightPwm > 1.0) {
            leftPwm -= overPower * (rightPwm - 1.0);
        rightPwm = 1.0;
        } else if (leftPwm < -1.0) {
            rightPwm += overPower * (-1.0 - leftPwm);
            leftPwm = -1.0;
        } else if (rightPwm < -1.0) {
            leftPwm += overPower * (-1.0 - rightPwm);
            rightPwm = -1.0;
        } 
        SetLeftRight(-leftPwm,-rightPwm);
        
    }   
    //If the value is too small make it zero. 
    public double handleDeadband(double val, double deadband) {
        return (Math.abs(val) > Math.abs(deadband)) ? val : 0.0;
    }
    public static double limit(double v, double limit) {
        return (Math.abs(v) < limit) ? v : limit * (v < 0 ? -1 : 1);
    }
    
    //Settings for the quadrature encoders
    private double MaxPeriod = 0.1; //Period in seconds
    private double MinRate = 10; //RPS
    private double DistancePerPulse = 5; //Pulse Per Revolution
    private int AverageSamples = 7;
    private double wheelDiameter = 4; //in inches
    
    //Initialize the Quadratures encoders for measurements
    public void initEncoder(){
        //set perameters of left encoder
	//leftQuadrature.setMaxPeriod(this.MaxPeriod);	// Period in seconds
	//leftQuadrature.setMinRate(this.MinRate); //Unit is in RPS
	//leftQuadrature.setDistancePerPulse(this.DistancePerPulse); // Pulse Per Revolution
	leftQuadrature.setReverseDirection(true); //False to reverse direction
	//leftQuadrature.setSamplesToAverage(this.AverageSamples); //used for determining period
	//set perameters of right encoder
	//rightQuadrature.setMaxPeriod(this.MaxPeriod);	// Period in seconds
	//rightQuadrature.setMinRate(this.MinRate); //Unit is in RPS
	//rightQuadrature.setDistancePerPulse(this.DistancePerPulse); // Pulse Per Revolution
	rightQuadrature.setReverseDirection(false); //False to reverse direction
	//rightQuadrature.setSamplesToAverage(this.AverageSamples); //used for determining period
	
	//Reset Encoder
	leftQuadrature.reset();
	rightQuadrature.reset();
		
	//Start counting Encoders
	leftQuadrature.start();
	rightQuadrature.start();
    }
    //returns the distance traveled read from the quadrature encoders
    public double getLeftEncoderDistance(){
        //256 steps is 1 revolution of the wheel. Use the diameter of the wheel
        //and to calculate the circumferance of the wheel, therefore,
        // use the count to find out distance traveled.
	return leftQuadrature.get()/255.00*wheelDiameter*Math.PI;
    }
    //returns the distance traveled read from the quadrature encoders
    public double getRightEncoderDistance(){
        //256 steps is 1 revolution of the wheel. Use the diameter of the wheel
        //and to calculate the circumferance of the wheel, therefore,
        // use the count to find out distance traveled.
	return rightQuadrature.get()/255.00*wheelDiameter*Math.PI;
    } 
    //Resets the count on the quadrature encoders
    public void resetEncoders(){
	leftQuadrature.reset();
	rightQuadrature.reset();
    }
    //Stops counting the quadrature encoders
    public void stopEncoders(){
	leftQuadrature.stop();
	rightQuadrature.stop();
    }
    
    //Returns the distance to the UltraSonicRange Sensor in inches
    public double getRange(){
        //Converts the voltage red in the Anologe Breakout Board to inches
        return ultraSonicRangeFinder.getVoltage()/.0049*0.393701; // 1cm/4.9mV/ * 0.393701 inch/ 1cm
    }
    public double getAverageSpeed(){
        //Gets avarage speed of both wheels
        double left = 0;
        double right = 0;
        double average = 0;
        left = leftQuadrature.getRate(); //get left speed of quadrature
        right = rightQuadrature.getRate(); // get right speed of quadrature 
        average = Math.abs((right + left)/2); // calculate average
        return average;
    }
}
