// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc841.CometFRC2014.subsystems;
import org.usfirst.frc841.CometFRC2014.RobotMap;
import org.usfirst.frc841.CometFRC2014.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class Intakes extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput highBallSensor = RobotMap.intakesHighBallSensor;
    DigitalInput ballPresentSensor = RobotMap.intakesBallPresentSensor;
    Relay frontIntake = RobotMap.intakesFrontIntake;
    SpeedController backIntake = RobotMap.intakesBackIntake;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    
    boolean previousLoadedState = false;
    boolean presentLoadedState = false;
    boolean catchState = false;
    
    boolean previousLoadedHighState = false;
    boolean presentLoadedHighState = false;
    boolean catchHighState = false;
    
            
            
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new IntakeCatchStop());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void FrontRollerRollIn(){
        frontIntake.set(Relay.Value.kForward);
    }
    public void FrontRollerRollOut(){
        frontIntake.set(Relay.Value.kReverse);
    }
    public void FrontRollerStop(){
        frontIntake.set(Relay.Value.kOff);
    }
    public void BackRollerRollIn(){
        backIntake.set(-.8);
    }
    public void BackRollerRollOut(){
        backIntake.set(1);
    }
    public void BackRollerStop(){
        backIntake.set(0);
    }
    public void updateCatchState(){
        previousLoadedState = presentLoadedState; 
        presentLoadedState = !ballPresentSensor.get();
        if ((previousLoadedState == false)& (presentLoadedState == true)){
            catchState = true;
        }  
    }
    public void clearCatchState(){
        catchState = false;
    }
    public boolean getCatchState(){
        return catchState;
    }
    
    public void updateCatchHighState(){
        previousLoadedHighState = presentLoadedHighState; 
        presentLoadedHighState = !highBallSensor.get();
        if ((previousLoadedHighState == false)& (presentLoadedHighState == true)){
            catchHighState = true;
        }  
    }
    public void clearCatchHighState(){
        catchHighState = false;
    }
    public boolean getCatchHighState(){
        return catchHighState;
    }
    
}
