// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc841.CometFRC2014.subsystems;
import org.usfirst.frc841.CometFRC2014.RobotMap;
import org.usfirst.frc841.CometFRC2014.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class IntakeTiltMechanisms extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogChannel potentiometer = RobotMap.intakeTiltMechanismsPotentiometer;
    DigitalInput ballPresentSensor = RobotMap.intakeTiltMechanismsBallPresentSensor;
    DoubleSolenoid backTilt = RobotMap.intakeTiltMechanismsBackTilt;
    DigitalInput highBallSensor = RobotMap.intakeTiltMechanismsHighBallSensor;
    DoubleSolenoid frontTilt = RobotMap.intakeTiltMechanismsFrontTilt;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    boolean previousLoadedState = false;
    boolean presentLoadedState = false;
    boolean catchState = false;
    
    boolean previousLoadedHighState = false;
    boolean presentLoadedHighState = false;
    boolean catchHighState= false;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new CatchBall());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void tiltOutwardFrontIntake(){
        frontTilt.set(DoubleSolenoid.Value.kForward);
    }
    public void tiltInwardFrontIntake(){
        frontTilt.set(DoubleSolenoid.Value.kReverse);
    }
    public void tiltOutwardBackIntake(){
        backTilt.set(DoubleSolenoid.Value.kForward);
    }
    public void tiltInwardBackIntake(){
        backTilt.set(DoubleSolenoid.Value.kReverse);
    }
    public void updateCatchState(){
       previousLoadedState = presentLoadedState; 
       presentLoadedState = !ballPresentSensor.get();
       if ((previousLoadedState == false)& (presentLoadedState == true)){
           catchState = true;
       }  
    }
    public void clearCatchState(){
        catchState = false;
    }
    public boolean getCatchState(){
        return catchState;
    }
    public double getPotentiometer(){
        return potentiometer.getVoltage();
    }
    
    
    public void updateCatchHighState(){
       previousLoadedHighState = presentLoadedHighState; 
       presentLoadedHighState = !highBallSensor.get();
       if ((previousLoadedHighState == false)& (presentLoadedHighState == true)){
           catchHighState = true;
       }  
    }
    public void clearCatchHighState(){
        catchHighState = false;
    }
    public boolean getCatchHighState(){
        return catchHighState;
    }
}
